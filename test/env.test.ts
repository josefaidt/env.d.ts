import * as assert from "node:assert"
import { test, describe } from "node:test"
import { spawn } from "node:child_process"
import * as fs from "node:fs"
import * as path from "node:path"
import { fileURLToPath } from "node:url"
import { generateDeclaration } from "../bin/env"

const __dirname = path.dirname(fileURLToPath(import.meta.url))

console.log(__dirname)

describe("generateDeclaration", () => {
  test("generates TypeScript declaration with environment variables", () => {
    const envVars = {
      DATABASE_URL: "postgres://localhost:5432/db",
      API_KEY: "secret123",
    }

    const result = generateDeclaration(envVars)

    const expected = `/**
 * This file was autogenerated with "npx env.d.ts"
 * Manual edits are okay, but will be overwritten when you run this command.
 * Be sure to _include_ this file in your tsconfig.json
 */
namespace NodeJS {
  interface ProcessEnv {
    DATABASE_URL: string;
    API_KEY: string;
  }
}
`

    assert.strictEqual(result, expected)
  })

  test("generates empty interface for no environment variables", () => {
    const result = generateDeclaration({})

    assert.ok(result.includes("interface ProcessEnv"))
    assert.ok(!result.includes(": string"))
  })

  test("uses 2-space indentation", () => {
    const envVars = { TEST_VAR: "value" }
    const result = generateDeclaration(envVars)

    assert.ok(result.includes("  interface ProcessEnv"))
    assert.ok(result.includes("  TEST_VAR: string"))
  })
})

describe("CLI", () => {
  const testDir = path.resolve(__dirname, "temp")
  const cliPath = path.resolve(__dirname, "../dist/env.js")

  function runCLI(
    args: string[] = []
  ): Promise<{ code: number; stdout: string; stderr: string }> {
    return new Promise((resolve) => {
      const child = spawn("node", [cliPath, ...args], { cwd: testDir })
      let stdout = ""
      let stderr = ""

      child.stdout?.on("data", (data) => {
        stdout += data.toString()
      })

      child.stderr?.on("data", (data) => {
        stderr += data.toString()
      })

      child.on("close", (code) => {
        resolve({ code: code || 0, stdout, stderr })
      })
    })
  }

  test("accepts positional argument for env file", async () => {
    // Setup test directory and env file
    fs.mkdirSync(testDir, { recursive: true })
    const envFile = path.join(testDir, "test.env")
    fs.writeFileSync(envFile, "TEST_VAR=test_value\nANOTHER_VAR=another_value")

    try {
      const result = await runCLI(["test.env"])

      assert.strictEqual(result.code, 0)

      const outputFile = path.join(testDir, "env.d.ts")
      assert.ok(fs.existsSync(outputFile))

      const content = fs.readFileSync(outputFile, "utf-8")
      assert.ok(content.includes("TEST_VAR: string"))
      assert.ok(content.includes("ANOTHER_VAR: string"))
    } finally {
      fs.rmSync(testDir, { recursive: true, force: true })
    }
  })

  test("accepts --out-dir option for output directory", async () => {
    // Setup test directory and env file
    fs.mkdirSync(testDir, { recursive: true })
    const envFile = path.join(testDir, ".env")
    const outputDir = path.join(testDir, "types")
    fs.writeFileSync(envFile, "OUTPUT_TEST=value")

    try {
      const result = await runCLI(["--out-dir", outputDir])

      assert.strictEqual(result.code, 0)

      const outputFile = path.join(outputDir, "env.d.ts")
      assert.ok(fs.existsSync(outputFile))

      const content = fs.readFileSync(outputFile, "utf-8")
      assert.ok(content.includes("OUTPUT_TEST: string"))
    } finally {
      fs.rmSync(testDir, { recursive: true, force: true })
    }
  })

  test("accepts -o short option for output directory", async () => {
    // Setup test directory and env file
    fs.mkdirSync(testDir, { recursive: true })
    const envFile = path.join(testDir, ".env")
    const outputDir = path.join(testDir, "generated")
    fs.writeFileSync(envFile, "SHORT_OPTION_TEST=value")

    try {
      const result = await runCLI(["-o", outputDir])

      assert.strictEqual(result.code, 0)

      const outputFile = path.join(outputDir, "env.d.ts")
      assert.ok(fs.existsSync(outputFile))

      const content = fs.readFileSync(outputFile, "utf-8")
      assert.ok(content.includes("SHORT_OPTION_TEST: string"))
    } finally {
      fs.rmSync(testDir, { recursive: true, force: true })
    }
  })

  test("combines positional arg and output directory option", async () => {
    // Setup test directory and env file
    fs.mkdirSync(testDir, { recursive: true })
    const envFile = path.join(testDir, "custom.env")
    const outputDir = path.join(testDir, "output")
    fs.writeFileSync(envFile, "COMBINED_TEST=value")

    try {
      const result = await runCLI(["custom.env", "--out-dir", outputDir])

      assert.strictEqual(result.code, 0)

      const outputFile = path.join(outputDir, "env.d.ts")
      assert.ok(fs.existsSync(outputFile))

      const content = fs.readFileSync(outputFile, "utf-8")
      assert.ok(content.includes("COMBINED_TEST: string"))
    } finally {
      fs.rmSync(testDir, { recursive: true, force: true })
    }
  })
})
